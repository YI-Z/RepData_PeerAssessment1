install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
exit()
ls()
cl()
clear()
clc()
clear
exit()
quit()
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
7/8
?pexp
pexp(11,0.1)
?punif
punif(0.8)
qunit(0.8)
qunif(0.8)
1-pexp(11,0.1)
?pbin
pbina
?pbino
?pbionm
?pbinom
1-pbinom(2,Inf,0.01)
1-pbinom(3,100,0.01)
1-pbinom(3,200,0.01)
1-pbinom(3,30000,0.01)
1-pbinom(3,3,0.01)
0.99**2
log(0.5)
-2*log(0.5)
sqrt(-log(0.5))
10/9
?cube
?cub
??cub
2.0 ** (1/3)
2/3
2log(2)
2*log(2)
?rug
?boxplot
?par
x11()
quartz()
?qplot
qplot
?qplot
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
R_version
?version
R.Version()
?upgrade
upgrade(R)
update.R()
?qplot
restart()
??restart
??ggplot
??ggplot2
install.packages("ggplot2")
library(ggplot2)
?qplot
?hclust
?heatmap
heat.colors()
heat.colors(3)
colors()
install.packages("RColorBrewer")
library(ggplot2)
library(lattice)
?"lattice"
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
setwd("~/Documents/Data Science/RepData/RepData_PeerAssessment1")
activity <- read.csv("activity.csv", header = T, na.strings = "NA")
activity$date <- as.Date(activity$date, "%Y-%m-%d") # transform the data object
int <- group_by(activity, interval)
library(dplyr)
int <- group_by(activity, interval)
names(int)
a <- summarise(int, mean(steps, na.rm = T))
a
interval_step <- activity %>% group_by(interval) %>% summarise(steps = mean(steps, na.rm = T))
interval_step
interval_step <- activity %>% group_by(interval) %>% summarise(ave_ssteps = mean(steps, na.rm = T))
with(interval_step, plot(ave_steps))
interval_step <- activity %>% group_by(interval) %>% summarise(ave_steps = mean(steps, na.rm = T))
with(interval_step, plot(ave_steps ~ interval, type = "l"))
with(interval_step, plot(ave_steps ~ interval, type = "l", ylab = "average steps"))
?max
which.max()
?which.max
max_int <- interval_step[which.max(interval_step$ave_steps),1]
max_int
total_daily <- activity %>% group_by(date) %>% summarise(daily_steps = sum(steps, na.rm = T))
with(total_daily, hist(daily_steps, breaks = 20))
with(total_daily, hist(daily_steps, breaks = 20, xlab = "total daily steps"))
with(total_daily, hist(daily_steps, breaks = 20, xlab = "total daily steps"), main = "Histogram of total daily steps")
?hist
with(total_daily, hist(daily_steps, breaks = 20, xlab = "total daily steps"), main = "Histogram of total daily steps")
with(total_daily, hist(daily_steps, breaks = 20, xlab = "total daily steps"), main = "Histogram of total daily steps")
with(total_daily, hist(daily_steps, breaks = 20, xlab = "total daily steps", main = "Histogram of total daily steps"))
?complete.cases
complete.cases((activity))
sum(complete.cases((activity)))
sum(!complete.cases((activity)))
activity_new <- activity
activity_new$steps[!complete.cases(activity)] <-
)
activity_new$steps[!complete.cases(activity)] <- interval_step[as.character(activity$interval[!complete.cases(activity)]), "ave_steps"]
head(activity_new)
names(activity_new)
names(activity)
activity_new[!complete.cases(activity), "steps"] <- interval_step[as.character(activity$interval[!complete.cases(activity)]), "ave_steps"]
head(activity_new)
activity[1, "date"]
activity[1:10, "date"]
activity_new <- mutate(activity, steps[!complete.cases(activity)] == interval_step[as.character(activity$interval[!complete.cases(activity)]), "ave_steps"])
activity_new <- mutate(activity, steps[!complete.cases(activity)] = interval_step[as.character(activity$interval[!complete.cases(activity)]), "ave_steps"])
activity_new <- transform(activity, steps[!complete.cases(activity)] = interval_step[as.character(activity$interval[!complete.cases(activity)]), "ave_steps"])
activity_new <- transform(activity, steps[!complete.cases(activity)] = interval_step[as.character(activity$interval[!complete.cases(activity)]), "ave_steps"])
s <- activity$steps
s
s[is.na(s)] <- 0
s
activity_new <- transform(activity, steps[!complete.cases(activity)] = interval_step[as.character(activity$interval[!complete.cases(activity)]), "ave_steps"])
s <- activity$steps
s[is.na(s)] <- interval_step[as.character(activity[is.na(s), "interval"]), "ave_steps"]
s
s[is.na(s)] .<- interval_step[as.character(activity[is.na(s), "interval"]), "ave_steps"]
s[is.na(s)] .= interval_step[as.character(activity[is.na(s), "interval"]), "ave_steps"]
interval_step[as.character(activity[is.na(s), "interval"]), "ave_steps"]
s
s <- activity$steps
interval_step[as.character(activity[is.na(s), "interval"]), "ave_steps"]
b<-interval_step[as.character(activity[is.na(s), "interval"]), "ave_steps"]
b
sum(is.na(b))
b<-interval_step[as.character(activity[is.na(s), "interval"]),]
b
b<-interval_step[activity[is.na(s), "interval"], "ave_steps"]
b
View(interval_step)
s
View(s)
View(activity)
interval_step <- transform(interval_step, interval = as.factor(interval))
View(interval_step)
b<-interval_step[activity[is.na(s), "interval"], "ave_steps"]
b<-interval_step[as.factor(activity[is.na(s), "interval"]), "ave_steps"]
View(b)
activity_new <- activity
activity_new <- transform(activity, steps[!complete.cases(activity)] = interval_step[as.factor(activity$interval[!complete.cases(activity)]), "ave_steps"])
activity_new <- mutate(activity, steps[!complete.cases(activity)] = interval_step[as.factor(activity$interval[!complete.cases(activity)]), "ave_steps"])
activity_new$steps[!complete.cases(activity)] <- interval_step[as.factor(activity$interval[!complete.cases(activity)]), "ave_steps"]
View(activity_new)
total_daily_new <- activity_new %>% group_by(date) %>% summarise(daily_steps = sum(steps))
hist(total_daily_new$daily_steps, breaks = 20, xlab = "total daily steps", main = "New histogram of total daily steps")
summary(total_daily_new)
?quantile
quantile(total_daily_new, prob = 0.5)
names(total_daily_new)
quantile(total_daily_new$daily_steps, prob = 0.5)
?floor
weekdays(as.Date("2012-02-01", "%Y-%m-%d"))
is.weekdays(as.Date("2012-02-01", "%Y-%m-%d"))
?is.weekday
names(activity_new)
weekdays(as.Date("2012-02-01", "%Y-%m-%d")) == 3
weekdays(as.Date("2012-02-01", "%Y-%m-%d")) == 4
weekdays(as.Date("2012-02-01", "%Y-%m-%d")) == 1
weekdays(as.Date("2012-02-01", "%Y-%m-%d")) == 2
weekdays(as.Date("2012-02-01", "%Y-%m-%d")) == 3
weekdays(as.Date("2012-02-01", "%Y-%m-%d")) == 4
weekdays(as.Date("2012-02-01", "%Y-%m-%d")) == 5
weekdays(as.Date("2012-02-01", "%Y-%m-%d")) == 6
weekdays(as.Date("2012-02-01", "%Y-%m-%d")) == 7
weekdays(as.Date("2012-02-01", "%Y-%m-%d"))
weekdays(as.Date("2012-02-01", "%Y-%m-%d", abbreviate = T)
)
weekdays(as.Date("2012-02-01", "%Y-%m-%d"), abbreviate = T)
names(activity_new)
week_day_end <- function(x) {
if (x == "Mon" | x == "Tue" | x == "Wed" | x == "Thu" | x == "Fri") return ("weekday")
if (x == "Sat" | x == "Sun") return ("weekend")
}  ## a short function transforms weekdays into weekday/weekend
activity_new$wkday <- week_day_end(activity_new$date)
activity_new$wkday <- week_day_end(weekdays(activity_new$date))
head(activity_new)
activity_new$wkday <- week_day_end(weekdays(activity_new$date))
activity_new <- with(activity_new, transform(wkday = week_day_end(weekdays(date))))
activity_new <- transform(activity_new, week_day_end(weekdays(activity_new$date)))
activity_new <- transform(activity_new, wkday = week_day_end(weekdays(activity_new$date)))
names(activity_new)
activity_new$wkday <- week_day_end(weekdays(activity_new$date))
week_day_end <- function(x) {
if (x == "Mon" || x == "Tue" || x == "Wed" || x == "Thu" || x == "Fri") return ("weekday")
if (x == "Sat" || x == "Sun") return ("weekend")
}  ## a short function transforms weekdays into weekday/weekend
activity_new$wkday <- week_day_end(weekdays(activity_new$date))
names(activity_new)
activity_new$wkday <- o
activity_new$wkday <- 0
activity_new$wkday <- week_day_end(weekdays(activity_new$date))
weekdays(activity_new$date)
activity_new$wkday <- week_day_end(weekdays(activity_new$date, abbreviate = T))
head(activity_new)
View(activity_new[1:100,])
View(activity_new)
unique(activity_new$wkday)
week_day_end <- function(x) {
if (x == "Mon" || x == "Tue" || x == "Wed" || x == "Thu" || x == "Fri") return ("weekday")
else return ("weekend")
}  ## a short function transforms weekdays into weekday/weekend
activity_new$wkday <- week_day_end(weekdays(activity_new$date, abbreviate = T))
unique(activity_new$wkday)
unique(activity_new$date)
weekdays(unique(activity_new$date), abbreviate = T)
?||
?\||
week_day_end(weekdays(unique(activity_new$date), abbreviate = T))
week_day_end <- function(x) {
if (x == "Mon" | x == "Tue" | x == "Wed" | x == "Thu" | x == "Fri") return ("weekday")
else return ("weekend")
}  ## a short function transforms weekdays into weekday/weekend
week_day_end(weekdays(unique(activity_new$date), abbreviate = T))
activity_new$wkday <- lapply((weekdays(activity_new$date, abbreviate = T)), week_day_end)
unique(activity_new$wkday)
head(activity_new)
View(activity_new)
interval_wkday <- activity_new %>% group_by(interval, wkday) %>% summarise(ave_steps = mean(steps))
activity_new$wkday <- as.factor(lapply((weekdays(activity_new$date, abbreviate = T)), week_day_end))
activity_new$wkday <- as.factor(apply((weekdays(activity_new$date, abbreviate = T)), week_day_end))
?apply
activity_new$wkday <- as.factor(sapply((weekdays(activity_new$date, abbreviate = T)), week_day_end))
interval_wkday <- activity_new %>% group_by(interval, wkday) %>% summarise(ave_steps = mean(steps))
interval_wkday
qplot(ave_steps ~ interval, data = interval_wkday, colour = wkday)
library(ggplot2)
qplot(ave_steps ~ interval, data = interval_wkday, colour = wkday)
qplot(interval, ave_steps, data = interval_wkday, colour = wkday)
qplot(interval, ave_steps, data = interval_wkday, colour = wkday, type = "l")
qplot(interval, ave_steps, data = interval_wkday, facets = wkday ~.)
?qplot
qplot(interval, ave_steps, data = interval_wkday, facets = wkday ~., geom = "line")
qplot(interval, ave_steps, data = interval_wkday, facets = .~wkday, geom = "line")
qplot(interval, ave_steps, data = interval_wkday, facets = wkday ~., geom = "line")
qplot(interval, ave_steps, data = interval_wkday, facets = .~wkday, geom = "line")
qplot(interval, ave_steps, data = interval_wkday, facets = .~wkday, geom = "line", ylab = "Number of steps")
?panel.plot
?panel
??panel
?opts_chunk
